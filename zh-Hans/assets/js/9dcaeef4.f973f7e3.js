"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[973],{3905:(e,t,a)=>{a.d(t,{Zo:()=>i,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),u=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},i=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),m=u(a),c=r,k=m["".concat(p,".").concat(c)]||m[c]||d[c]||o;return a?n.createElement(k,l(l({ref:t},i),{},{components:a})):n.createElement(k,l({ref:t},i))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=c;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[m]="string"==typeof e?e:r,l[1]=s;for(var u=2;u<o;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},7848:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var n=a(7462),r=(a(7294),a(3905));const o={},l="\u6570\u636e\u66f4\u65b0 (Upsert) \u548c Merge UDF \u4f7f\u7528\u6559\u7a0b",s={unversionedId:"Tutorials/upsert-and-merge-udf",id:"Tutorials/upsert-and-merge-udf",title:"\u6570\u636e\u66f4\u65b0 (Upsert) \u548c Merge UDF \u4f7f\u7528\u6559\u7a0b",description:"\x3c!--",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/02-Tutorials/05-upsert-and-merge-udf.md",sourceDirName:"02-Tutorials",slug:"/Tutorials/upsert-and-merge-udf",permalink:"/zh-Hans/docs/Tutorials/upsert-and-merge-udf",draft:!1,editUrl:"https://github.com/lakesoul-io/LakeSoul/tree/main/website/docs/02-Tutorials/05-upsert-and-merge-udf.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u5c06LakeSoul\u6570\u636e\u6302\u8f7d\u5230hive meta\u7528\u6cd5\u6559\u7a0b",permalink:"/zh-Hans/docs/Tutorials/data-mount-to-hive"},next:{title:"\u591a\u6d41\u5408\u5e76\u6784\u5efa\u5bbd\u8868\u6559\u7a0b",permalink:"/zh-Hans/docs/Tutorials/mutil-stream-merge"}},p={},u=[{value:"\u81ea\u5b9a\u4e49 merge \u5408\u5e76\u903b\u8f91",id:"\u81ea\u5b9a\u4e49-merge-\u5408\u5e76\u903b\u8f91",level:2}],i={toc:u},m="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},i,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u6570\u636e\u66f4\u65b0-upsert-\u548c-merge-udf-\u4f7f\u7528\u6559\u7a0b"},"\u6570\u636e\u66f4\u65b0 (Upsert) \u548c Merge UDF \u4f7f\u7528\u6559\u7a0b"),(0,r.kt)("p",null,"LakeSoul\u53ef\u4ee5\u652f\u6301\u5bf9\u5df2\u7ecf\u5165\u6e56\u7684\u6570\u636e\u505a\u90e8\u5206\u5b57\u6bb5\u66f4\u65b0\u529f\u80fd\uff0c\u800c\u4e0d\u5fc5\u5c06\u6574\u5f20\u6570\u636e\u8868\u5168\u90e8\u8986\u76d6\u91cd\u5199\uff0c\u907f\u514d\u8fd9\u79cd\u7e41\u91cd\u4e14\u6d6a\u8d39\u8d44\u6e90\u7684\u64cd\u4f5c\u3002"),(0,r.kt)("p",null,"\u4e3e\u4e2a\u4f8b\u5b50\u4e00\u5f20\u8868\u6570\u636e\u4fe1\u606f\u5982\u4e0b\uff0cid\u4e3a\u4e3b\u952e\uff08\u5373hashPartitions\uff09\uff0c\u76ee\u524d\u9700\u8981\u6839\u636e\u4e3b\u952e\u5b57\u6bb5\uff0c\u5bf9phone_number\u505a\u5b57\u6bb5\u4fee\u6539\u5904\u7406\u3002"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"id"),(0,r.kt)("th",{parentName:"tr",align:null},"name"),(0,r.kt)("th",{parentName:"tr",align:null},"phone_number"),(0,r.kt)("th",{parentName:"tr",align:null},"address"),(0,r.kt)("th",{parentName:"tr",align:null},"job"),(0,r.kt)("th",{parentName:"tr",align:null},"company"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Jake"),(0,r.kt)("td",{parentName:"tr",align:null},"13700001111"),(0,r.kt)("td",{parentName:"tr",align:null},"address_1"),(0,r.kt)("td",{parentName:"tr",align:null},"job_1"),(0,r.kt)("td",{parentName:"tr",align:null},"company_2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Make"),(0,r.kt)("td",{parentName:"tr",align:null},"13511110000"),(0,r.kt)("td",{parentName:"tr",align:null},"address_2"),(0,r.kt)("td",{parentName:"tr",align:null},"job_2"),(0,r.kt)("td",{parentName:"tr",align:null},"company_2")))),(0,r.kt)("p",null,"\u53ef\u4ee5\u4f7f\u7528 upsert \u6765\u5b9e\u73b0\u5bf9\u4efb\u610f\u884c\u4e2d\u4efb\u610f\u4e00\u4e2a\u5b57\u6bb5\u7684\u66f4\u65b0\u3002upsert\u9700\u8981\u5305\u542b\u4e3b\u952e (id) \u548c\u9700\u8981\u4fee\u6539\u7684 address \u4fe1\u606f\uff0c\u518d\u6b21\u8bfb\u53d6\u6574\u5f20\u8868\u6570\u636e address \u4fbf\u53ef\u5c55\u793a\u4e3a\u4fee\u6539\u540e\u7684\u5b57\u6bb5\u4fe1\u606f\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import org.apache.spark.sql._\nval spark = SparkSession.builder.master("local")\n  .config("spark.sql.extensions", "com.dmetasoul.lakesoul.sql.LakeSoulSparkSessionExtension")\n  .getOrCreate()\nimport spark.implicits._\n\nval df = Seq(("1", "Jake", "13700001111", "address_1", "job_1", "company_1"),("2", "Make", "13511110000", "address_2", "job_2", "company_2"))\n  .toDF("id", "name", "phone_number", "address", "job", "company")\nval tablePath = "s3a://bucket-name/table/path/is/also/table/name"\n\ndf.write\n  .mode("append")\n  .format("lakesoul")\n  .option("hashPartitions","id")\n  .option("hashBucketNum","2")\n  .save(tablePath)\n\nval lakeSoulTable = LakeSoulTable.forPath(tablePath)\nval extraDF = Seq(("1", "address_1_1")).toDF("id","address")\nlakeSoulTable.upsert(extraDF)\nlakeSoulTable.toDF.show()\n\n/**\n *  result:\n *  +---+----+------------+-----------+-----+---------+\n *  | id|name|phone_number|    address|  job|  company|\n *  +---+----+------------+-----------+-----+---------+\n *  |  1|Jake| 13700001111|address_1_1|job_1|company_1|\n *  |  2|Make| 13511110000|  address_2|job_2|company_2|\n *  +---+----+------------+-----------+-----+---------+\n */\n')),(0,r.kt)("h2",{id:"\u81ea\u5b9a\u4e49-merge-\u5408\u5e76\u903b\u8f91"},"\u81ea\u5b9a\u4e49 merge \u5408\u5e76\u903b\u8f91"),(0,r.kt)("p",null,'LakeSoul \u9ed8\u8ba4 merge \u89c4\u5219\uff0c\u5373\u6570\u636e\u66f4\u65b0\u540e\u53d6\u6700\u540e\u4e00\u6761\u8bb0\u5f55\u4f5c\u4e3a\u8be5\u5b57\u6bb5\u6570\u636e (org.apache.spark.sql.execution.datasources.v2.merge.parquet.batch.merge_operator.DefaultMergeOp)\u3002\u5728\u6b64\u57fa\u7840\u4e0a\uff0cLakeSoul \u5185\u7f6e\u6269\u5c55\u4e86\u51e0\u79cd\u6570\u636e merge \u903b\u8f91\uff0c\u5bf9 Int/Long \u5b57\u6bb5\u505a\u52a0\u548c merge(MergeOpInt/MergeOpLong)\u3001\u5bf9\u975e\u7a7a\u5b57\u6bb5\u66f4\u65b0 (MergeNonNullOp)\u3001\u4ee5","\u62fc\u63a5\u5b57\u7b26\u4e32 merge \u65b9\u5f0f\u3002'),(0,r.kt)("p",null,"\u4e0b\u9762\u4ee5\u5bf9\u975e\u7a7a\u5b57\u6bb5\u66f4\u65b0 (MergeNonNullOp) \u4e3a\u4f8b\uff0c\u501f\u7528\u4e0a\u9762\u8868\u683c\u6570\u636e\u6837\u4f8b\u3002\u6570\u636e\u5199\u5165\u65f6\u540c\u6837\u4ee5 upsert \u65b9\u5f0f\u8fdb\u884c\u66f4\u65b0\u5199\u5165\uff0c\u7136\u540e\u5728\u6570\u636e\u8bfb\u53d6\u65f6\u9700\u8981\u6ce8\u518c merger \u903b\u8f91\uff0c\u7136\u540e\u8fdb\u884c\u8bfb\u53d6\u5373\u53ef\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import org.apache.spark.sql.execution.datasources.v2.merge.parquet.batch.merge_operator.MergeNonNullOp\nimport org.apache.spark.sql.functions.expr\nimport org.apache.spark.sql._\nval spark = SparkSession.builder.master("local")\n  .config("spark.sql.extensions", "com.dmetasoul.lakesoul.sql.LakeSoulSparkSessionExtension")\n  .getOrCreate()\nimport spark.implicits._\n\nval df = Seq(("1", "Jake", "13700001111", "address_1", "job_1", "company_1"),("2", "Make", "13511110000", "address_2", "job_2", "company_2"))\n  .toDF("id", "name", "phone_number", "address", "job", "company")\n\nval tablePath = "s3a://bucket-name/table/path/is/also/table/name"\n\ndf.write\n  .mode("append")\n  .format("lakesoul")\n  .option("hashPartitions","id")\n  .option("hashBucketNum","2")\n  .save(tablePath)\n\nval lakeSoulTable = LakeSoulTable.forPath(tablePath)\nval extraDF = Seq(("1", "null", "13100001111", "address_1_1", "job_1_1", "company_1_1"),("2", "null", "13111110000", "address_2_2", "job_2_2", "company_2_2"))\n  .toDF("id", "name", "phone_number", "address", "job", "company")\n\nnew MergeNonNullOp().register(spark, "NotNullOp")\nlakeSoulTable.toDF.show()\nlakeSoulTable.upsert(extraDF)\nlakeSoulTable.toDF.withColumn("name", expr("NotNullOp(name)")).show()\n\n/**\n *  result\n *  +---+----+------------+-----------+-------+-----------+\n *  | id|name|phone_number|    address|    job|    company|\n *  +---+----+------------+-----------+-------+-----------+\n *  |  1|Jake| 13100001111|address_1_1|job_1_1|company_1_1|\n *  |  2|Make| 13111110000|address_2_2|job_2_2|company_2_2|\n *  +---+----+------------+-----------+-------+-----------+\n */\n')),(0,r.kt)("p",null,"\u7528\u6237\u4e5f\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49 MergeOperator (\u5b9e\u73b0 ",(0,r.kt)("inlineCode",{parentName:"p"},"trait org.apache.spark.sql.execution.datasources.v2.merge.parquet.batch.merge_operator.MergeOperator"),") \u6765\u81ea\u5b9a\u4e49 Merge \u65f6\u7684\u903b\u8f91\uff0c\u80fd\u591f\u7075\u6d3b\u5730\u5b9e\u73b0\u6570\u636e\u9ad8\u6548\u5165\u6e56\u3002"))}d.isMDXComponent=!0}}]);