"use strict";(self.webpackChunklakesoul_website=self.webpackChunklakesoul_website||[]).push([[8542],{3074:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>d,toc:()=>u});var n=a(5893),l=a(1151),i=a(4866),s=a(5162);const r={},o="Flink Getting Started Guide",d={id:"Getting Started/Flink-Guide",title:"Flink Getting Started Guide",description:"\x3c!--",source:"@site/docs/01-Getting Started/03-Flink-Guide.mdx",sourceDirName:"01-Getting Started",slug:"/Getting Started/Flink-Guide",permalink:"/docs/Getting Started/Flink-Guide",draft:!1,unlisted:!1,editUrl:"https://github.com/lakesoul-io/LakeSoul/tree/main/website/docs/01-Getting Started/03-Flink-Guide.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Spark Getting Started Guide",permalink:"/docs/Getting Started/spark-guide"},next:{title:"LakeSoul CDC Ingestion via Spark Streaming",permalink:"/docs/Tutorials/consume-cdc-via-spark-streaming"}},c={},u=[{value:"Support Matrix",id:"support-matrix",level:2},{value:"PG Configuration",id:"pg-configuration",level:2},{value:"SQL",id:"sql",level:2},{value:"Download LakeSoul Flink Jar",id:"download-lakesoul-flink-jar",level:3},{value:"Start SQL Client",id:"start-sql-client",level:3},{value:"Create Table",id:"create-table",level:2},{value:"Drop Table",id:"drop-table",level:2},{value:"Insert Data",id:"insert-data",level:2},{value:"Update Data",id:"update-data",level:2},{value:"Delete Data",id:"delete-data",level:2},{value:"Query Data",id:"query-data",level:2},{value:"Full Read",id:"full-read",level:3},{value:"Snapshot Batch Read",id:"snapshot-batch-read",level:3},{value:"Incremental Range Read",id:"incremental-range-read",level:3},{value:"Streaming Read",id:"streaming-read",level:3},{value:"Lookup Join",id:"lookup-join",level:3}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"flink-getting-started-guide",children:"Flink Getting Started Guide"}),"\n",(0,n.jsx)(t.h2,{id:"support-matrix",children:"Support Matrix"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"LakeSoul"}),(0,n.jsx)(t.th,{children:"Flink"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"2.4.x+"}),(0,n.jsx)(t.td,{children:"1.17"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"2.1.x-2.3.x"}),(0,n.jsx)(t.td,{children:"1.14"})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"pg-configuration",children:"PG Configuration"}),"\n",(0,n.jsxs)(t.p,{children:["Add the following configuration to ",(0,n.jsx)(t.code,{children:"$FLINK_HOME/conf/flink-conf.yaml"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"containerized.master.env.LAKESOUL_PG_DRIVER: com.lakesoul.shaded.org.postgresql.Driver\ncontainerized.master.env.LAKESOUL_PG_USERNAME: root\ncontainerized.master.env.LAKESOUL_PG_PASSWORD: root\ncontainerized.master.env.LAKESOUL_PG_URL: jdbc:postgresql://localhost:5432/test_lakesoul_meta?stringtype=unspecified\ncontainerized.taskmanager.env.LAKESOUL_PG_DRIVER: com.lakesoul.shaded.org.postgresql.Driver\ncontainerized.taskmanager.env.LAKESOUL_PG_USERNAME: root\ncontainerized.taskmanager.env.LAKESOUL_PG_PASSWORD: root\ncontainerized.taskmanager.env.LAKESOUL_PG_URL: jdbc:postgresql://localhost:5432/test_lakesoul_meta?stringtype=unspecified\n"})}),"\n",(0,n.jsx)(t.p,{children:"Note that both the master and taskmanager environment variables need to be set."}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsx)(t.p,{children:"The connection information, username and password of the Postgres database need to be modified according to the actual deployment."})}),"\n",(0,n.jsxs)(t.admonition,{type:"caution",children:[(0,n.jsxs)(t.p,{children:["Note that if you use Session mode to start a job, that is, submit the job to Flink Standalone Cluster as a client, ",(0,n.jsx)(t.code,{children:"flink run"})," as a client will not read the above configuration, so you need to configure the environment variables separately, namely:"]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"export LAKESOUL_PG_DRIVER=com.lakesoul.shaded.org.postgresql.Driver\nexport LAKESOUL_PG_URL=jdbc:postgresql://localhost:5432/test_lakesoul_meta?stringtype=unspecified\nexport LAKESOUL_PG_USERNAME=root\nexport LAKESOUL_PG_PASSWORD=root\n"})})]}),"\n",(0,n.jsx)(t.h2,{id:"sql",children:"SQL"}),"\n",(0,n.jsx)(t.h3,{id:"download-lakesoul-flink-jar",children:"Download LakeSoul Flink Jar"}),"\n",(0,n.jsxs)(t.p,{children:["It can be downloaded from the LakeSoul Release page: ",(0,n.jsx)(t.a,{href:"https://github.com/lakesoul-io/LakeSoul/releases/download/v2.5.1/lakesoul-flink-2.5.1-flink-1.17.jar",children:"https://github.com/lakesoul-io/LakeSoul/releases/download/v2.5.1/lakesoul-flink-2.5.1-flink-1.17.jar"}),"."]}),"\n",(0,n.jsx)(t.h3,{id:"start-sql-client",children:"Start SQL Client"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"# Start Flink SQL Client\nbin/sql-client.sh embedded -j lakesoul-flink-2.5.1-flink-1.17.jar\n"})}),"\n",(0,n.jsx)(t.h2,{id:"create-table",children:"Create Table"}),"\n",(0,n.jsxs)(i.Z,{defaultValue:"SQL",values:[{label:"Java",value:"Java"},{label:"SQL",value:"SQL"}],children:[(0,n.jsx)(s.Z,{value:"Java",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:'TableEnvironment tEnv = TableEnvironment.create(EnvironmentSettings.inBatchMode());\nString createUserSql = "create table user_info (" +\n        "`id` INT," +\n        "name STRING," +\n        "score INT," +\n        "`date` STRING," +\n        "region STRING," +\n         " PRIMARY KEY (`id`,`name`) NOT ENFORCED"+\n        ") PARTITIONED BY (`region`,`date`)"+\n         " WITH (" +\n        " \'connector\'=\'lakesoul\'," +\n        " \'hashBucketNum\'=\'4\'," +\n        " \'use_cdc\'=\'true\'," +\n        " \'path\'=\'/tmp/lakesoul/flink/sink/test\' )";\ntEnv. executeSql(createUserSql);\n'})})}),(0,n.jsx)(s.Z,{value:"SQL",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"-- Create the test_table table, use id and name as the joint primary key, use region and date as the two-level range partition, catalog is lakesoul, and database is default\ncreate table `lakesoul`.`default`.test_table (\n            `id` INT,\n            name STRING,\n            score INT,\n            `date` STRING,\n            region STRING,\n        PRIMARY KEY (`id`,`name`) NOT ENFORCED\n        ) PARTITIONED BY (`region`,`date`)\n        WITH (\n            'connector'='lakesoul',\n            'hashBucketNum'='4',\n            'use_cdc'='true',\n            'path'='file:///tmp/lakesoul/flink/sink/test');\n"})})})]}),"\n",(0,n.jsxs)(t.admonition,{type:"tip",children:[(0,n.jsx)(t.p,{children:"The meaning of the parameters for creating a table"}),(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Parameter"}),(0,n.jsx)(t.th,{children:"Explanation"}),(0,n.jsx)(t.th,{children:"Value Format"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"PARTITIONED BY"}),(0,n.jsx)(t.td,{children:"used to specify the range partition field of the table, if there is no range partition field, it will be omitted"}),(0,n.jsxs)(t.td,{children:["PARTITIONED BY (",(0,n.jsx)(t.code,{children:"date"}),")"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"PRIMARY KEY"}),(0,n.jsx)(t.td,{children:"used to specify one or more primary keys"}),(0,n.jsxs)(t.td,{children:["PARIMARY KEY (",(0,n.jsx)(t.code,{children:"id"}),", ",(0,n.jsx)(t.code,{children:"name"}),") NOT ENFORCED"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"connector"}),(0,n.jsx)(t.td,{children:"data source connector, used to specify the data source type"}),(0,n.jsx)(t.td,{children:"'connector'='lakesoul'"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"hashBucketNum"}),(0,n.jsx)(t.td,{children:"table with primary key(s) must have this property set to a number >= 0"}),(0,n.jsx)(t.td,{children:"'hashBucketNum'='4'"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"path"}),(0,n.jsx)(t.td,{children:"used to specify the storage path of the table"}),(0,n.jsx)(t.td,{children:"'path'='file:///tmp/lakesoul/flink/sink/test'"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"use_cdc"}),(0,n.jsxs)(t.td,{children:["Set whether the table is in CDC format (refer to ",(0,n.jsx)(t.a,{href:"/docs/Usage%20Docs/cdc-ingestion-table",children:"CDC Table Format"})," )"]}),(0,n.jsx)(t.td,{children:"'use_cdc'='true'"})]})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"drop-table",children:"Drop Table"}),"\n",(0,n.jsxs)(i.Z,{defaultValue:"SQL",values:[{label:"Java",value:"Java"},{label:"SQL",value:"SQL"}],children:[(0,n.jsx)(s.Z,{value:"Java",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:'tEnvs.executeSql("DROP TABLE if exists test_table");\n'})})}),(0,n.jsx)(s.Z,{value:"SQL",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"DROP TABLE if exists test_table;\n"})})})]}),"\n",(0,n.jsx)(t.h2,{id:"insert-data",children:"Insert Data"}),"\n",(0,n.jsxs)(i.Z,{defaultValue:"SQL",values:[{label:"Java",value:"Java"},{label:"SQL",value:"SQL"}],children:[(0,n.jsx)(s.Z,{value:"Java",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"tEnvs.executeSql(\"insert into `lakesoul`.`default`.test_table values (1, 'AAA', 98, '2023-05-10', 'China')\"). await();\n"})})}),(0,n.jsxs)(s.Z,{value:"SQL",children:[(0,n.jsx)(t.p,{children:"Batch insert:"}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"insert into `lakesoul`.`default`.test_table values (1,'AAA', 98, '2023-05-10', 'China');\n"})}),(0,n.jsx)(t.p,{children:"Streaming: read data from another stream source and write into LakeSoul. If upstream source is a Changelog stream, then LakeSoul table should be created with CDC format enabled."}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"insert into `lakesoul`.`default`.test_table select * from `lakesoul`.`cdcsink`.soure_table;\n"})})]})]}),"\n",(0,n.jsxs)(t.admonition,{type:"caution",children:[(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"For stream writing, checkpoint interval needs to be set, and it is recommended to be more than 1 minute;"}),"\n",(0,n.jsx)(t.li,{children:"Set the corresponding time zone according to the environment:"}),"\n"]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"SET 'table.local-time-zone' = 'Asia/Shanghai';\n-- Set the checkpointing interval\nSET 'execution.checkpointing.interval' = '2min';\n"})})]}),"\n",(0,n.jsx)(t.h2,{id:"update-data",children:"Update Data"}),"\n",(0,n.jsx)(t.p,{children:"For batch mode only."}),"\n",(0,n.jsxs)(i.Z,{defaultValue:"SQL",values:[{label:"Java",value:"Java"},{label:"SQL",value:"SQL"}],children:[(0,n.jsx)(s.Z,{value:"Java",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:'tEnvs.executeSql("UPDATE `lakesoul`.`default`.test_table set score = 100 where id = 1") await();\n'})})}),(0,n.jsx)(s.Z,{value:"SQL",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"UPDATE `lakesoul`.`default`.test_table set score = 100 where id = 1;\n"})})})]}),"\n",(0,n.jsx)(t.admonition,{type:"caution",children:(0,n.jsxs)(t.p,{children:["Note that in the case of ",(0,n.jsx)(t.code,{children:"update"}),", updating the values of primary key and partition columns is not allowed. For the stream execution mode, LakeSoul has been able to support ChangeLog semantics, which can support additions, deletions and modifications."]})}),"\n",(0,n.jsx)(t.h2,{id:"delete-data",children:"Delete Data"}),"\n",(0,n.jsx)(t.p,{children:"For batch mode only."}),"\n",(0,n.jsxs)(i.Z,{defaultValue:"SQL",values:[{label:"Java",value:"Java"},{label:"SQL",value:"SQL"}],children:[(0,n.jsx)(s.Z,{value:"Java",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:'tEnvs.executeSql("DELETE FROM `lakesoul`.`default`.test_table where id = 1") await();\n'})})}),(0,n.jsx)(s.Z,{value:"SQL",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"DELETE FROM `lakesoul`.`default`.test_table where id = 1;\n"})})})]}),"\n",(0,n.jsx)(t.admonition,{type:"caution",children:(0,n.jsxs)(t.p,{children:["In the case of ",(0,n.jsx)(t.code,{children:"delete"}),", partitioning columns in the condition are not allowed.For the stream execution mode, LakeSoul has been able to support ChangeLog semantics, which can support additions, deletions and modifications."]})}),"\n",(0,n.jsx)(t.h2,{id:"query-data",children:"Query Data"}),"\n",(0,n.jsx)(t.h3,{id:"full-read",children:"Full Read"}),"\n",(0,n.jsxs)(i.Z,{defaultValue:"SQL",values:[{label:"Java",value:"Java"},{label:"SQL",value:"SQL"}],children:[(0,n.jsx)(s.Z,{value:"Java",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"// Create a batch execution environment\ntEnvs.executeSql(\"SELECT * FROM `lakesoul`.`default`.test_table where region='China' and `date`='2023-05-10'\").print();\n"})})}),(0,n.jsx)(s.Z,{value:"SQL",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"SELECT * FROM `lakesoul`.`default`.test_table where region='China' and `date`='2023-05-10';\n"})})})]}),"\n",(0,n.jsx)(t.h3,{id:"snapshot-batch-read",children:"Snapshot Batch Read"}),"\n",(0,n.jsx)(t.p,{children:"LakeSoul supports snapshot reading of tables, and users can query all data before the end timestamp by specifying partition information and end timestamp."}),"\n",(0,n.jsxs)(i.Z,{defaultValue:"SQL",values:[{label:"Java",value:"Java"},{label:"SQL",value:"SQL"}],children:[(0,n.jsx)(s.Z,{value:"Java",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"tEnvs.executeSql(\"SELECT * FROM `lakesoul`.`default`.test_table /*+ OPTIONS('readtype'='snapshot', 'readendtime'='2023-05-01 15:20:15', 'timezone'='Asia/Shanghai')*/ WHERE region='China'\").print();\n"})})}),(0,n.jsx)(s.Z,{value:"SQL",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"-- Execute snapshot read of test_table in the region=China partition, the end timestamp of the read is 2023-05-01 15:20:15, and the time zone is Asia/Shanghai\nSELECT * FROM `lakesoul`.`default`.test_table /*+ OPTIONS('readtype'='snapshot', 'readendtime'='2023-05-01 15:20:15', 'timezone'='Asia/Shanghai')*/ WHERE region='China';\n"})})})]}),"\n",(0,n.jsx)(t.h3,{id:"incremental-range-read",children:"Incremental Range Read"}),"\n",(0,n.jsx)(t.p,{children:"LakeSoul supports range incremental reads for tables. Users can query incremental data within this time range by specifying partition information, start timestamp, and end timestamp."}),"\n",(0,n.jsxs)(i.Z,{defaultValue:"SQL",values:[{label:"Java",value:"Java"},{label:"SQL",value:"SQL"}],children:[(0,n.jsx)(s.Z,{value:"Java",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:" tEnvs.executeSql(\"SELECT * FROM `lakesoul`.`default`.test_table /*+ OPTIONS('readtype'='incremental'\uff0c'readstarttime'='2023-05-01 15:15:15 ', 'readendtime'='2023-05-01 15:20:15', 'timezone'='Asia/Shanghai')*/ WHERE region='China'\").print();\n"})})}),(0,n.jsx)(s.Z,{value:"SQL",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"-- Incremental reading of test_table in the region=China partition, the read timestamp range is 2023-05-01 15:15:15 to 2023-05-01 15:20:15, and the time zone is Asia/Shanghai\nSELECT * FROM `lakesoul`.`default`.test_table /*+ OPTIONS('readtype'='incremental', 'readstarttime'='2023-05-01 15:15:15 ', 'readendtime'='2023-05-01 15:20:15', 'timezone'='Asia/Shanghai')*/ WHERE region='China';\n"})})})]}),"\n",(0,n.jsx)(t.h3,{id:"streaming-read",children:"Streaming Read"}),"\n",(0,n.jsx)(t.p,{children:"The LakeSoul table supports streaming reads in Flink. Streaming reads are based on incremental reads. By specifying the start timestamp and partition information, users can continuously and uninterruptedly read new data after the start timestamp.\nIf start timestamp is not specified, it will read from the first data\u3002"}),"\n",(0,n.jsxs)(i.Z,{defaultValue:"SQL",values:[{label:"Java",value:"Java"},{label:"SQL",value:"SQL"}],children:[(0,n.jsx)(s.Z,{value:"Java",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"tEnvs.executeSql(\"SELECT * FROM `lakesoul`.`default`.test_table /*+ OPTIONS('timezone'='Asia/Shanghai')*/ WHERE region='China'\").print();\n"})})}),(0,n.jsx)(s.Z,{value:"SQL",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"-- Incremental reading of test_table in the region=China partition, the time zone is Asia/Shanghai\nSELECT * FROM `lakesoul`.`default`.test_table /*+ OPTIONS('timezone'='Asia/Shanghai')*/ WHERE region='China';\n"})})})]}),"\n",(0,n.jsxs)(t.p,{children:["LakeSoul fully supports Flink Changelog Stream semantics when streaming. For the LakeSoul CDC table, the result of incremental reading is still in CDC format, that is, it contains ",(0,n.jsx)(t.code,{children:"insert"}),", ",(0,n.jsx)(t.code,{children:"update"}),", ",(0,n.jsx)(t.code,{children:"delete"})," events, and these events will be automatically converted to the corresponding values of the RowKind field of Flink's RowData class object, so that in Flink incremental pipeline calculation is achieved."]}),"\n",(0,n.jsx)(t.h3,{id:"lookup-join",children:"Lookup Join"}),"\n",(0,n.jsxs)(t.p,{children:["LakeSoul supports Lookup Join operations of Flink SQL. Lookup Join will cache the right table to be joined in memory, thereby greatly improving the join speed, and can be used in scenarios where relatively small dimension tables are joined. LakeSoul tries to refresh the cache every 60 seconds by default, you could change this by setting ",(0,n.jsx)(t.code,{children:"'lookup.join.cache.ttl'='60s'"})," property when creating the dimension table."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"CREATE TABLE `lakesoul`.`default`.customers (\n            `c_id` INT,\n            `name` STRING,\n        PRIMARY KEY (`c_id`) NOT ENFORCED)\n        WITH (\n            'connector'='lakesoul',\n            'hashBucketNum'='1',\n            'path'='file:///tmp/lakesoul/flink/sink/customers'\n            );  \nCREATE TABLE `lakesoul`.`default`.orders (\n            `o_id` INT,\n            `o_c_id` INT,\n        PRIMARY KEY (`o_id`) NOT ENFORCED)\n        WITH (\n            'connector'='lakesoul',\n            'hashBucketNum'='1',\n            'path'='file:///tmp/lakesoul/flink/sink/orders',\n            'lookup.join.cache.ttl'='60s'\n            );  \nSELECT `o_id`, `c_id`, `name`\nFROM\n(SELECT *, proctime() as proctime FROM `lakesoul`.`default`.orders) as o\nJOIN `lakesoul`.`default`.customers FOR SYSTEM_TIME AS OF o.proctime\nON c_id = o_cid;\n"})}),"\n",(0,n.jsx)(t.p,{children:"The Orders table is enriched with data from the Customers table. The FOR SYSTEM_TIME AS OF clause with the subsequent processing time attribute ensures that each row of the Orders table is joined with those Customers rows that match the join predicate at the point in time when the Orders row is processed by the join operator. It also prevents that the join result is updated when a joined Customer row is updated in the future. The lookup join also requires a mandatory equality join predicate, in the example above o.oc_id = c.id."}),"\n",(0,n.jsxs)(t.admonition,{type:"tip",children:[(0,n.jsx)(t.p,{children:"LakeSoul supports read LakeSoul tables in batch and stream mode, execute commands on the Flink SQLClient client, and switch between stream and batch execution modes."}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"-- Execute Flink tasks according to the stream\nSET execution.runtime-mode = streaming;\nSET 'execution.checkpointing.interval' = '1min';\n-- Execute Flink tasks in batch mode\nSET execution.runtime-mode = batch;\n"})}),(0,n.jsxs)(t.p,{children:["Using Flink SQL, the format of the specified conditional query is ",(0,n.jsx)(t.code,{children:"SELECT * FROM test_table /*+ OPTIONS('key'='value')*/ WHERE partition=somevalue"}),". In all of the following read modes, you could optionally specify partition values in ",(0,n.jsx)(t.code,{children:"WHERE"})," clause to either specify the exact all partition values or just a subset of partitions values. LakeSoul will find the partitions that match the partition filters.\nIn the query, ",(0,n.jsx)(t.code,{children:"/* OPTIONS() */"})," are query options (hints). Hints must be placed directly after the table name (before any other subclause) and the options when LakeSoul reads include:"]}),(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Parameter"}),(0,n.jsx)(t.th,{children:"Explanation of meaning"}),(0,n.jsx)(t.th,{children:"Parameter filling format"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"readtype"}),(0,n.jsx)(t.td,{children:"read type, you can specify incremental read incremental, snapshot read snapshot, do not specify the default full read"}),(0,n.jsx)(t.td,{children:"'readtype'='incremental'"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"discoveryinterval"}),(0,n.jsx)(t.td,{children:"The time interval for discovering new data in streaming incremental read, in milliseconds, the default is 30000"}),(0,n.jsx)(t.td,{children:"'discoveryinterval'='10000'"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"readstarttime"}),(0,n.jsx)(t.td,{children:"Start read timestamp, if no start timestamp is specified, it will read from the start version number by default"}),(0,n.jsx)(t.td,{children:"'readstarttime'='2023-05-01 15:15:15'"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"readendtime"}),(0,n.jsx)(t.td,{children:"End read timestamp, if no end timestamp is specified, the current latest version number will be read by default"}),(0,n.jsx)(t.td,{children:"'readendtime'='2023-05-01 15:20:15'"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"timezone"}),(0,n.jsx)(t.td,{children:"The time zone information of the timestamp, if the time zone information of the timestamp is not specified, it will be processed according to the local time zone by default"}),(0,n.jsx)(t.td,{children:"'timezone'='Asia/Sahanghai'"})]})]})]})]})]})}function m(e={}){const{wrapper:t}={...(0,l.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},5162:(e,t,a)=>{a.d(t,{Z:()=>s});a(7294);var n=a(6905);const l={tabItem:"tabItem_Ymn6"};var i=a(5893);function s(e){let{children:t,hidden:a,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,n.Z)(l.tabItem,s),hidden:a,children:t})}},4866:(e,t,a)=>{a.d(t,{Z:()=>k});var n=a(7294),l=a(6905),i=a(2466),s=a(6550),r=a(469),o=a(1980),d=a(7392),c=a(12);function u(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:l}}=e;return{value:t,label:a,attributes:n,default:l}}))}(a);return function(e){const t=(0,d.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:a}=e;const l=(0,s.k6)(),i=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,o._X)(i),(0,n.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(l.location.search);t.set(i,e),l.replace({...l.location,search:t.toString()})}),[i,l])]}function x(e){const{defaultValue:t,queryString:a=!1,groupId:l}=e,i=h(e),[s,o]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:i}))),[d,u]=p({queryString:a,groupId:l}),[x,j]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[l,i]=(0,c.Nk)(a);return[l,(0,n.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:l}),f=(()=>{const e=d??x;return m({value:e,tabValues:i})?e:null})();(0,r.Z)((()=>{f&&o(f)}),[f]);return{selectedValue:s,selectValue:(0,n.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),j(e)}),[u,j,i]),tabValues:i}}var j=a(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=a(5893);function g(e){let{className:t,block:a,selectedValue:n,selectValue:s,tabValues:r}=e;const o=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),c=e=>{const t=e.currentTarget,a=o.indexOf(t),l=r[a].value;l!==n&&(d(t),s(l))},u=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=o.indexOf(e.currentTarget)+1;t=o[a]??o[0];break}case"ArrowLeft":{const a=o.indexOf(e.currentTarget)-1;t=o[a]??o[o.length-1];break}}t?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},t),children:r.map((e=>{let{value:t,label:a,attributes:i}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,ref:e=>o.push(e),onKeyDown:u,onClick:c,...i,className:(0,l.Z)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":n===t}),children:a??t},t)}))})}function b(e){let{lazy:t,children:a,selectedValue:l}=e;const i=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===l));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==l})))})}function S(e){const t=x(e);return(0,v.jsxs)("div",{className:(0,l.Z)("tabs-container",f.tabList),children:[(0,v.jsx)(g,{...e,...t}),(0,v.jsx)(b,{...e,...t})]})}function k(e){const t=(0,j.Z)();return(0,v.jsx)(S,{...e,children:u(e.children)},String(t))}},1151:(e,t,a)=>{a.d(t,{Z:()=>r,a:()=>s});var n=a(7294);const l={},i=n.createContext(l);function s(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);