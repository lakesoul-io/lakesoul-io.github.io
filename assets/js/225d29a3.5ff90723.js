"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[485],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=p(a),c=r,g=u["".concat(s,".").concat(c)]||u[c]||m[c]||o;return a?n.createElement(g,l(l({ref:t},d),{},{components:a})):n.createElement(g,l({ref:t},d))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},938:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const o={},l="Upsert Data and Merge UDF Tutorial",i={unversionedId:"Tutorials/upsert-and-merge-udf",id:"Tutorials/upsert-and-merge-udf",title:"Upsert Data and Merge UDF Tutorial",description:"\x3c!--",source:"@site/docs/02-Tutorials/05-upsert-and-merge-udf.md",sourceDirName:"02-Tutorials",slug:"/Tutorials/upsert-and-merge-udf",permalink:"/docs/Tutorials/upsert-and-merge-udf",draft:!1,editUrl:"https://github.com/lakesoul-io/LakeSoul/tree/main/website/docs/02-Tutorials/05-upsert-and-merge-udf.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Mount LakeSoul Data to Hive Meta",permalink:"/docs/Tutorials/data-mount-to-hive"},next:{title:"Multi Stream Merge to Build Wide Table Tutorial",permalink:"/docs/Tutorials/mutil-stream-merge"}},s={},p=[{value:"Customize Merge Logic",id:"customize-merge-logic",level:2}],d={toc:p},u="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"upsert-data-and-merge-udf-tutorial"},"Upsert Data and Merge UDF Tutorial"),(0,r.kt)("p",null,"LakeSoul can support the function of updating some fields of the data that has entered the lake, without having to overwrite the entire data table, so as to avoid this heavy and resource wasting operation."),(0,r.kt)("p",null,"For example, the data information of a table is as follows. The ID is the primary key (i.e. hashPartitions). At present, it is necessary to check the data of phone according to the primary key field_ Number to modify the field."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"id"),(0,r.kt)("th",{parentName:"tr",align:null},"name"),(0,r.kt)("th",{parentName:"tr",align:null},"phone_number"),(0,r.kt)("th",{parentName:"tr",align:null},"address"),(0,r.kt)("th",{parentName:"tr",align:null},"job"),(0,r.kt)("th",{parentName:"tr",align:null},"company"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Jake"),(0,r.kt)("td",{parentName:"tr",align:null},"13700001111"),(0,r.kt)("td",{parentName:"tr",align:null},"address_1"),(0,r.kt)("td",{parentName:"tr",align:null},"job_1"),(0,r.kt)("td",{parentName:"tr",align:null},"company_2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Make"),(0,r.kt)("td",{parentName:"tr",align:null},"13511110000"),(0,r.kt)("td",{parentName:"tr",align:null},"address_2"),(0,r.kt)("td",{parentName:"tr",align:null},"job_2"),(0,r.kt)("td",{parentName:"tr",align:null},"company_2")))),(0,r.kt)("p",null,"Upsert can be used to update and overwrite existing fields. Upsert operation needs to include the primary key (e.g. id) and other fields (e.g. address) to be modified. Reading the address of the whole table data again can display the modified field information."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import org.apache.spark.sql._\nval spark = SparkSession.builder.master("local")\n  .config("spark.sql.extensions", "com.dmetasoul.lakesoul.sql.LakeSoulSparkSessionExtension")\n  .getOrCreate()\nimport spark.implicits._\n\nval df = Seq(("1", "Jake", "13700001111", "address_1", "job_1", "company_1"),("2", "Make", "13511110000", "address_2", "job_2", "company_2"))\n  .toDF("id", "name", "phone_number", "address", "job", "company")\nval tablePath = "s3a://bucket-name/table/path/is/also/table/name"\n\ndf.write\n  .mode("append")\n  .format("lakesoul")\n  .option("hashPartitions","id")\n  .option("hashBucketNum","2")\n  .save(tablePath)\n\nval lakeSoulTable = LakeSoulTable.forPath(tablePath)\nval extraDF = Seq(("1", "address_1_1")).toDF("id","address")\nlakeSoulTable.upsert(extraDF)\nlakeSoulTable.toDF.show()\n\n/**\n *  result:\n *  +---+----+------------+-----------+-----+---------+\n *  | id|name|phone_number|    address|  job|  company|\n *  +---+----+------------+-----------+-----+---------+\n *  |  1|Jake| 13700001111|address_1_1|job_1|company_1|\n *  |  2|Make| 13511110000|  address_2|job_2|company_2|\n *  +---+----+------------+-----------+-----+---------+\n */\n')),(0,r.kt)("h2",{id:"customize-merge-logic"},"Customize Merge Logic"),(0,r.kt)("p",null,"The essence of the field update supported by LakeSoul is to follow the default merge rule of LakeSoul, that is, after data is upserted, the latest record is taken as the changed field data (see ",(0,r.kt)("inlineCode",{parentName:"p"},"org.apache.spark.sql.execution.datasources.v2.merge.request.batch.merge_operator.DefaultMergeOp"),'). On this basis, LakeSoul has several built-int merge operators, including adding and merging Int/Long fields (MergeOpInt/MergeOpLong), updating no empty fields (MergeNonNullOp), and merging strings with ",".'),(0,r.kt)("p",null,"The following is an example of updating no null fields (MergeNonNullOp), borrowing the above table data sample. When data is written, it is also updated and written in the upsert mode. When reading data, you need to register the merge logic and then read."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import org.apache.spark.sql.execution.datasources.v2.merge.parquet.batch.merge_operator.MergeNonNullOp\nimport org.apache.spark.sql.functions.expr\nimport org.apache.spark.sql._\nval spark = SparkSession.builder.master("local")\n  .config("spark.sql.extensions", "com.dmetasoul.lakesoul.sql.LakeSoulSparkSessionExtension")\n  .getOrCreate()\nimport spark.implicits._\n\nval df = Seq(("1", "Jake", "13700001111", "address_1", "job_1", "company_1"),("2", "Make", "13511110000", "address_2", "job_2", "company_2"))\n  .toDF("id", "name", "phone_number", "address", "job", "company")\n\nval tablePath = "s3a://bucket-name/table/path/is/also/table/name"\n\ndf.write\n  .mode("append")\n  .format("lakesoul")\n  .option("hashPartitions","id")\n  .option("hashBucketNum","2")\n  .save(tablePath)\n\nval lakeSoulTable = LakeSoulTable.forPath(tablePath)\nval extraDF = Seq(("1", "null", "13100001111", "address_1_1", "job_1_1", "company_1_1"),("2", "null", "13111110000", "address_2_2", "job_2_2", "company_2_2"))\n  .toDF("id", "name", "phone_number", "address", "job", "company")\n\nnew MergeNonNullOp().register(spark, "NotNullOp")\nlakeSoulTable.toDF.show()\nlakeSoulTable.upsert(extraDF)\nlakeSoulTable.toDF.withColumn("name", expr("NotNullOp(name)")).show()\n\n/**\n *  result\n *  +---+----+------------+-----------+-------+-----------+\n *  | id|name|phone_number|    address|    job|    company|\n *  +---+----+------------+-----------+-------+-----------+\n *  |  1|Jake| 13100001111|address_1_1|job_1_1|company_1_1|\n *  |  2|Make| 13111110000|address_2_2|job_2_2|company_2_2|\n *  +---+----+------------+-----------+-------+-----------+\n */\n')),(0,r.kt)("p",null,"You could also define your own merge logic via implementing the trait ",(0,r.kt)("inlineCode",{parentName:"p"},"org.apache.spark.sql.execution.datasources.v2.merge.parquet.batch.merge_operator.MergeOperator")," to achieve efficient data update."))}m.isMDXComponent=!0}}]);