"use strict";(self.webpackChunklakesoul_website=self.webpackChunklakesoul_website||[]).push([[8164],{6965:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var t=a(5893),s=a(1151);const r={},l="LakeSoul's Supports for Python and Machine Learning",o={id:"Usage Docs/machine-learning-support",title:"LakeSoul's Supports for Python and Machine Learning",description:"LakeSoul implements interfaces for PyTorch/PyArrow/HuggingFace/Ray, allowing users to retrieve datasets from LakeSoul",source:"@site/docs/03-Usage Docs/11-machine-learning-support.md",sourceDirName:"03-Usage Docs",slug:"/Usage Docs/machine-learning-support",permalink:"/docs/Usage Docs/machine-learning-support",draft:!1,unlisted:!1,editUrl:"https://github.com/lakesoul-io/LakeSoul/tree/main/website/docs/03-Usage Docs/11-machine-learning-support.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Use Presto to Query LakeSoul's Table",permalink:"/docs/Usage Docs/setup-presto"},next:{title:"Multi-tenant: Workspace and Role Permission Control",permalink:"/docs/Usage Docs/workspace-and-rbac"}},i={},c=[{value:"Install",id:"install",level:2},{value:"Download LakeSoul wheel file",id:"download-lakesoul-wheel-file",level:3},{value:"Install python virtual enviroment",id:"install-python-virtual-enviroment",level:3},{value:"PyTorch API Usage",id:"pytorch-api-usage",level:2},{value:"Ray DataSource",id:"ray-datasource",level:2},{value:"PyArrow/Pandas Reads LakeSoul Table",id:"pyarrowpandas-reads-lakesoul-table",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"lakesouls-supports-for-python-and-machine-learning",children:"LakeSoul's Supports for Python and Machine Learning"}),"\n",(0,t.jsx)(n.p,{children:"LakeSoul implements interfaces for PyTorch/PyArrow/HuggingFace/Ray, allowing users to retrieve datasets from LakeSoul\ntables through the interfaces. Distributed reading is supported for both PyTorch and Ray. LakeSoul for Python has now\nreleased 1.0 Beta."}),"\n",(0,t.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,t.jsx)(n.h3,{id:"download-lakesoul-wheel-file",children:"Download LakeSoul wheel file"}),"\n",(0,t.jsx)(n.p,{children:"For users of Python 3.8, Python 3.9, and Python 3.10, we have prepared different wheel files for each version. Please\ndownload the appropriate one based on your requirements. We will publish official package to pypi.org in near future."}),"\n",(0,t.jsx)(n.p,{children:"The Python package currently only supports Linux systems and can be used on distros with GLibc 2.17 and above (Centos 7\nand above, Ubuntu 16.04 and above, etc.)."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["For Python 3.8\nusers: ",(0,t.jsx)(n.a,{href:"https://dmetasoul-bucket.obs.cn-southwest-2.myhuaweicloud.com/releases/lakesoul/python/v1.0/lakesoul-1.0.0b1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",children:"lakesoul-1.0.0b1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl"})]}),"\n",(0,t.jsxs)(n.li,{children:["For Python 3.9\nusers: ",(0,t.jsx)(n.a,{href:"https://dmetasoul-bucket.obs.cn-southwest-2.myhuaweicloud.com/releases/lakesoul/python/v1.0/lakesoul-1.0.0b1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",children:"lakesoul-1.0.0b1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl"})]}),"\n",(0,t.jsxs)(n.li,{children:["For Python 3.10\nusers: ",(0,t.jsx)(n.a,{href:"https://dmetasoul-bucket.obs.cn-southwest-2.myhuaweicloud.com/releases/lakesoul/python/v1.0/lakesoul-1.0.0b1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",children:"lakesoul-1.0.0b1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Assuming we are using Python 3.8, we can down load the wheel file as below"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"wget https://dmetasoul-bucket.obs.cn-southwest-2.myhuaweicloud.com/releases/lakesoul/python/v1.0/lakesoul-1.0.0b0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n"})}),"\n",(0,t.jsx)(n.h3,{id:"install-python-virtual-enviroment",children:"Install python virtual enviroment"}),"\n",(0,t.jsx)(n.p,{children:"We have provide several AI training examples using LakeSoul as data source. Follow the below instructions to setup a\ntesting environment."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# change python version if needed\nconda create -n lakesoul_test python=3.8\nconda activate lakesoul_test\ngit clone https://github.com/lakesoul-io/LakeSoul.git\ncd LakeSoul/python/examples\n# replace ${PWD} with your wheel file directory in requirements.txt\npip install -r requirements.txt\n"})}),"\n",(0,t.jsx)(n.h2,{id:"pytorch-api-usage",children:"PyTorch API Usage"}),"\n",(0,t.jsx)(n.p,{children:"LakeSoul implements interfaces for PyTorch/HuggingFace, which allows users to directly export data from LakeSoul tables\ninto HuggingFace datasets."}),"\n",(0,t.jsx)(n.p,{children:"API for reading tables:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import datasets\nimport lakesoul.huggingface\n\ndataset = datasets.IterableDataset.from_lakesoul(\"lakesoul_table\", partitions={'split': 'train'})\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can create a PyTorch/HuggingFace dataset for training. The distributed training environment is automatically aware\nand no additional parameters are required when initializing the dataset."}),"\n",(0,t.jsxs)(n.p,{children:["Below is an example code that exports the feature-transformed ",(0,t.jsx)(n.a,{href:"https://www.kaggle.com/competitions/titanic",children:"Titanic"}),"\ndataset from LakeSoul and then trains and validates a DNN model using the dataset."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import argparse\nimport pandas as pd\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.nn.init as init\n\nimport datasets\nimport lakesoul.huggingface\n\nfrom torch.autograd import Variable\n\n# hyper parameters\nSEED = 0\ntorch.manual_seed(SEED)\ntorch.cuda.manual_seed(SEED)\nbatch_size = 50\nnum_epochs = 50\nlearning_rate = 0.01\nweight_decay = 0.005\n\n# label and feature columns\nlabel_column = 'label'\nfeature_columns = 'f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,f19,f20,f21,f22,f23,f24,f25,f26'.split(\n    ',')\n\n\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.bn = nn.BatchNorm1d(26)\n        self.fc1 = nn.Linear(26, 256, bias=True)\n        self.fc2 = nn.Linear(256, 2, bias=True)\n        self._initialize_weights()\n\n    def forward(self, x):\n        x = self.bn(x)\n        x = self.fc1(x)\n        x = F.relu(x)\n        x = self.fc2(x)\n        x = torch.sigmoid(x)\n        return x\n\n    def _initialize_weights(self):\n        for m in self.modules():\n            if isinstance(m, nn.Linear):\n                init.xavier_uniform_(m.weight)\n                if m.bias is not None:\n                    init.constant_(m.bias, 0)\n\n\ndef batchify(dataset, batch_size):\n    X_train = []\n    y_train = []\n    for i, item in enumerate(dataset):\n        feature_list = [item[feature] for feature in feature_columns]\n        X_train.append(feature_list)\n        y_train.append(int(item[label_column]))\n        if len(y_train) == batch_size:\n            yield X_train, y_train\n            X_train = []\n            y_train = []\n    # Handle the remaining records that don't fill up a full batch\n    if len(y_train) > 0:\n        yield X_train, y_train\n\n\ndef train_model(net, datasource, num_epochs, batch_size, learning_rate):\n    dataset = datasets.IterableDataset.from_lakesoul(datasource, partitions={'split': 'train'})\n\n    criterion = nn.CrossEntropyLoss()\n    optimizer = torch.optim.AdamW(net.parameters(), lr=learning_rate, weight_decay=weight_decay)\n\n    for epoch in range(num_epochs):\n        if epoch % 5 == 0:\n            print('Epoch {}'.format(epoch + 1))\n        for X_train, y_train in batchify(dataset, batch_size):\n            x_var = Variable(torch.FloatTensor(X_train))\n            y_var = Variable(torch.LongTensor(y_train))\n            optimizer.zero_grad()\n            ypred_var = net(x_var)\n            loss = criterion(ypred_var, y_var)\n            loss.backward()\n            optimizer.step()\n\n\ndef evaluate_model(net, datasource, batch_size):\n    dataset = datasets.IterableDataset.from_lakesoul(datasource, partitions={'split': 'val'})\n    num_samples = 0\n    num_correct = 0\n\n    for X_val, y_val in batchify(dataset, batch_size):\n        batch_size = len(y_val)\n        test_var = Variable(torch.FloatTensor(X_val))\n        with torch.no_grad():\n            result = net(test_var)\n        values, labels = torch.max(result, 1)\n        num_right = np.sum(labels.data.numpy() == y_val)\n        num_samples += batch_size\n        num_correct += num_right\n\n    accuracy = num_correct / num_samples\n    print('Accuracy {:.2f}'.format(accuracy))\n\n\ndef main(table):\n    net = Net()\n    train_model(net, table, batch_size, num_epochs, learning_rate)\n    evaluate_model(net, table, batch_size)\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--table', type=str, default='titanic_trans', help='lakesoul table name')\n    args = parser.parse_args()\n\n    main(args.table)\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["More Examples at  ",(0,t.jsx)(n.a,{href:"https://github.com/lakesoul-io/LakeSoul/tree/main/python/examples",children:"LakeSoul/python/examples"})]}),"\n",(0,t.jsx)(n.h2,{id:"ray-datasource",children:"Ray DataSource"}),"\n",(0,t.jsxs)(n.p,{children:["LakeSoul implements Ray's ",(0,t.jsx)(n.a,{href:"https://docs.ray.io/en/latest/data/api/doc/ray.data.Datasource.html",children:"Datasource"}),". The\nfollowing is an example of calling code:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import ray.data\nimport lakesoul.ray\n\nds = ray.data.read_lakesoul(\"table_name\", partitions={'split': 'train'})\n"})}),"\n",(0,t.jsx)(n.h2,{id:"pyarrowpandas-reads-lakesoul-table",children:"PyArrow/Pandas Reads LakeSoul Table"}),"\n",(0,t.jsxs)(n.p,{children:["LakeSoul can support single-machine reading of data and use PyArrow and Pandas for calculations. LakeSoul returns\nPyArrow's ",(0,t.jsx)(n.a,{href:"https://arrow.apache.org/docs/python/generated/pyarrow.dataset.Dataset.html",children:"Dataset"})," object when reading,\nsupporting iterative access. Example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from lakesoul.arrow import lakesoul_dataset\n\nds = lakesoul_dataset(\"table_name\", partitions={'split': 'train'})\n\n# iterate batches in dataset\n# this will not load entire table to memory\nfor batch in ds.to_batches():\n    ...\n\n# convert to pandas table\n# this will load entire table into memory\ndf = ds.to_table().to_pandas()\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},1151:(e,n,a)=>{a.d(n,{Z:()=>o,a:()=>l});var t=a(7294);const s={},r=t.createContext(s);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);