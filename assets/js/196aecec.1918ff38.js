"use strict";(self.webpackChunklakesoul_website=self.webpackChunklakesoul_website||[]).push([[2021],{707:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var n=t(5893),a=t(1151);const r={},i="Synchronization of Entire Database into LakeSoul",l={id:"Usage Docs/flink-cdc-sync",title:"Synchronization of Entire Database into LakeSoul",description:"\x3c!--",source:"@site/docs/03-Usage Docs/05-flink-cdc-sync.md",sourceDirName:"03-Usage Docs",slug:"/Usage Docs/flink-cdc-sync",permalink:"/docs/Usage Docs/flink-cdc-sync",draft:!1,unlisted:!1,editUrl:"https://github.com/lakesoul-io/LakeSoul/tree/main/website/docs/03-Usage Docs/05-flink-cdc-sync.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Use LakeSoul CDC Table Format",permalink:"/docs/Usage Docs/cdc-ingestion-table"},next:{title:"LakeSoul Flink Connector",permalink:"/docs/Usage Docs/flink-lakesoul-connector"}},d={},c=[{value:"Main features",id:"main-features",level:2},{value:"How to use the command line",id:"how-to-use-the-command-line",level:2},{value:"1. Download LakeSoul Flink Jar",id:"1-download-lakesoul-flink-jar",level:3},{value:"2. Start the Flink job",id:"2-start-the-flink-job",level:3},{value:"2.1 Add LakeSoul metadata database configuration",id:"21-add-lakesoul-metadata-database-configuration",level:4},{value:"LakeSoul Flink CDC Sink job execution process",id:"lakesoul-flink-cdc-sink-job-execution-process",level:2},{value:"LakeSoul Flink CDC Sink Exactly Once Semantic Guarantee",id:"lakesoul-flink-cdc-sink-exactly-once-semantic-guarantee",level:2},{value:"Type mapping relationship between MySQL and LakeSoul",id:"type-mapping-relationship-between-mysql-and-lakesoul",level:2},{value:"Data type matching",id:"data-type-matching",level:2},{value:"Precautions",id:"precautions",level:2}];function o(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"synchronization-of-entire-database-into-lakesoul",children:"Synchronization of Entire Database into LakeSoul"}),"\n",(0,n.jsx)(s.p,{children:"Since version 2.1.0, LakeSoul has introduced Flink CDC Sink, capable of supporting Table API and SQL (single-table) as well as Stream API (multiple tables within a database). Currently, the supported upstream data sources are MySQL (5.6-8.0), Oracle (11, 12, 19, 21), and Postgresql (10-14). The unified entry for data ingestion into the lake is JdbcCdc."}),"\n",(0,n.jsx)(s.h2,{id:"main-features",children:"Main features"}),"\n",(0,n.jsx)(s.p,{children:"In the Stream API, the main functions of LakeSoul Sink are:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Support real-time CDC synchronization of thousands of tables (different schemas) in the same Flink job, and different tables will be automatically written to the corresponding table names of LakeSoul"}),"\n",(0,n.jsx)(s.li,{children:"For MySQL and PostgreSQL, LakeSoul supports automatic synchronization of schema changes (DDL) to downstream reads, ensuring compatibility between old and new data. Currently, it supports column addition and deletion as well as increasing precision for numeric types.* Support automatic perception of new tables in the upstream database during operation, and automatic table creation in LakeSoul;"}),"\n",(0,n.jsx)(s.li,{children:"However, for Oracle, only tables with unchanged schemas are supported for synchronization (adding or deleting columns is not allowed), and it does not support synchronization of new tables."}),"\n",(0,n.jsx)(s.li,{children:"Additionally, MySQL and PostgreSQL support automatic detection of newly created tables in the upstream database during runtime, enabling automatic table creation within LakeSoul."}),"\n",(0,n.jsx)(s.li,{children:"Provide Flink command line startup entry class, support specifying parameters such as database name, table name blacklist, parallelism, etc.;"}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"how-to-use-the-command-line",children:"How to use the command line"}),"\n",(0,n.jsx)(s.h3,{id:"1-download-lakesoul-flink-jar",children:"1. Download LakeSoul Flink Jar"}),"\n",(0,n.jsxs)(s.p,{children:["It can be downloaded from the LakeSoul Release page: ",(0,n.jsx)(s.a,{href:"https://github.com/lakesoul-io/LakeSoul/releases/download/v2.5.3/lakesoul-flink-1.17-2.5.3.jar",children:"https://github.com/lakesoul-io/LakeSoul/releases/download/v2.5.3/lakesoul-flink-1.17-2.5.3.jar"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"The currently supported Flink version is 1.17."}),"\n",(0,n.jsx)(s.h3,{id:"2-start-the-flink-job",children:"2. Start the Flink job"}),"\n",(0,n.jsx)(s.h4,{id:"21-add-lakesoul-metadata-database-configuration",children:"2.1 Add LakeSoul metadata database configuration"}),"\n",(0,n.jsxs)(s.p,{children:["Add the following configuration to ",(0,n.jsx)(s.code,{children:"$FLINK_HOME/conf/flink-conf.yaml"}),":"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yaml",children:"containerized.master.env.LAKESOUL_PG_DRIVER: com.lakesoul.shaded.org.postgresql.Driver\ncontainerized.master.env.LAKESOUL_PG_USERNAME: root\ncontainerized.master.env.LAKESOUL_PG_PASSWORD: root\ncontainerized.master.env.LAKESOUL_PG_URL: jdbc:postgresql://localhost:5432/test_lakesoul_meta?stringtype=unspecified\ncontainerized.taskmanager.env.LAKESOUL_PG_DRIVER: com.lakesoul.shaded.org.postgresql.Driver\ncontainerized.taskmanager.env.LAKESOUL_PG_USERNAME: root\ncontainerized.taskmanager.env.LAKESOUL_PG_PASSWORD: root\ncontainerized.taskmanager.env.LAKESOUL_PG_URL: jdbc:postgresql://localhost:5432/test_lakesoul_meta?stringtype=unspecified\n"})}),"\n",(0,n.jsx)(s.p,{children:"Note that both the master and taskmanager environment variables need to be set."}),"\n",(0,n.jsx)(s.admonition,{type:"tip",children:(0,n.jsx)(s.p,{children:"The connection information, username and password of the Postgres database need to be modified according to the actual deployment."})}),"\n",(0,n.jsxs)(s.admonition,{type:"caution",children:[(0,n.jsxs)(s.p,{children:["Note that if you use Session mode to start a job, that is, submit the job to Flink Standalone Cluster as a client, ",(0,n.jsx)(s.code,{children:"flink run"})," as a client will not read the above configuration, so you need to configure the environment variables separately, namely:"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"export LAKESOUL_PG_DRIVER=com.lakesoul.shaded.org.postgresql.Driver\nexport LAKESOUL_PG_URL=jdbc:postgresql://localhost:5432/test_lakesoul_meta?stringtype=unspecified\nexport LAKESOUL_PG_USERNAME=root\nexport LAKESOUL_PG_PASSWORD=root\n"})})]}),"\n",(0,n.jsx)(s.p,{children:"Description of required parameters:"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Parameter"}),(0,n.jsx)(s.th,{children:"Meaning"}),(0,n.jsx)(s.th,{children:"Value Description"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"-c"}),(0,n.jsx)(s.td,{children:"The task runs the main function entry class"}),(0,n.jsx)(s.td,{children:"org.apache.flink.lakesoul.entry.MysqlCdc"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Main package"}),(0,n.jsx)(s.td,{children:"Task running jar"}),(0,n.jsx)(s.td,{children:"lakesoul-flink-1.17-2.5.3.jar"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--source_db.type"}),(0,n.jsx)(s.td,{children:"source database type"}),(0,n.jsx)(s.td,{children:"mysql postgres oracle"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--source_db.host"}),(0,n.jsx)(s.td,{children:"The address of the source database"}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--source_db.port"}),(0,n.jsx)(s.td,{children:"source database port"}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--source_db.user"}),(0,n.jsx)(s.td,{children:"source database username"}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--source_db.password"}),(0,n.jsx)(s.td,{children:"Password for source database"}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--source.parallelism"}),(0,n.jsx)(s.td,{children:"The parallelism of a single table read task affects the data reading speed. The larger the value, the greater the pressure on source database."}),(0,n.jsx)(s.td,{children:"The parallelism can be adjusted according to the write QPS of source database"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--sink.parallelism"}),(0,n.jsx)(s.td,{children:"The parallelism of the single-table write task, which is also the number of primary key shards in the LakeSoul table. Affects the landing speed of data entering the lake. The larger the value, the greater the number of small files, which affects the subsequent read performance; the smaller the value, the greater the pressure on the write task, and the greater the possibility of data skew. It can be adjusted according to the data volume of the largest table. It is generally recommended that a degree of parallelism (primary key sharding) manage no more than 10 million rows of data."}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--warehouse_path"}),(0,n.jsx)(s.td,{children:"Data storage path prefix (cluster prefix is \u200b\u200brequired for hdfs)"}),(0,n.jsx)(s.td,{children:"LakeSoul will write the corresponding table data to the warehouse_path/database_name/table_name/ directory"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--flink.savepoint"}),(0,n.jsx)(s.td,{children:"Flink savepoint path (cluster prefix is \u200b\u200brequired for hdfs)"}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--flink.checkpoint"}),(0,n.jsx)(s.td,{children:"Flink checkpoint path (cluster prefix is \u200b\u200brequired for hdfs)"}),(0,n.jsx)(s.td,{})]})]})]}),"\n",(0,n.jsx)(s.p,{children:"Other Flink parameters, such as job manager, task manager CPU, memory, slots, etc., also need to be set according to the specific situation."}),"\n",(0,n.jsx)(s.p,{children:"Optional parameter description:"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Parameter"}),(0,n.jsx)(s.th,{children:"Meaning Description"}),(0,n.jsx)(s.th,{children:"Parameter Filling Format"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--job.checkpoint_mode"}),(0,n.jsx)(s.td,{children:"Data synchronization mode, the default is EXACTLY_ONCE"}),(0,n.jsx)(s.td,{children:"--job.checkpoint_mode AT_LEAST_ONCE"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--job.checkpoint_interval"}),(0,n.jsx)(s.td,{children:"Checkpoint storage interval, in ms, default is 10 minutes"}),(0,n.jsx)(s.td,{children:"--job.checkpoint_interval 1200000"})]})]})]}),"\n",(0,n.jsx)(s.p,{children:"For MySQL, the following additional parameters need to be configured"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Parameter"}),(0,n.jsx)(s.th,{children:"Required"}),(0,n.jsx)(s.th,{children:"Meaning Description"}),(0,n.jsx)(s.th,{children:"Parameter Filling Format"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--source_db.exclude_tables"}),(0,n.jsx)(s.td,{children:"optional"}),(0,n.jsx)(s.td,{children:"A list of data table names that do not need to be synchronized, separated by commas, the default is empty"}),(0,n.jsx)(s.td,{children:"--source_db.exclude_tables test_1,test_2"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--server_time_zone=Asia/Shanghai"}),(0,n.jsx)(s.td,{children:"optional"}),(0,n.jsx)(s.td,{children:'MySQL server time zone, Flink side defaults to "Asia/Shanghai"'}),(0,n.jsxs)(s.td,{children:["Refer to ",(0,n.jsx)(s.a,{href:"https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html",children:"JDK ZoneID \u6587\u6863"})]})]})]})]}),"\n",(0,n.jsxs)(s.p,{children:["Synchronous mysql job example\nFor Mysql configuration, please refer to ",(0,n.jsx)(s.a,{href:"https://ververica.github.io/flink-cdc-connectors/release-2.4/content/connectors/mysql-cdc.html",children:"https://ververica.github.io/flink-cdc-connectors/release-2.4/content/connectors/mysql-cdc.html"})]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:'./bin/flink run -c org.apache.flink.lakesoul.entry.JdbcCDC \\\n    lakesoul-flink-1.17-2.5.3.jar \\\n    --source_db.db_name "testDB" \\\n    --source_db.user "root" \\\n    --source.parallelism 1 \\\n    --source_db.db_type "mysql" \\\n    --source_db.password "123456" \\\n    --source_db.host "172.17.0.2" \\\n    --source_db.port 3306 \\\n    --sink.parallelism 1 \\\n    --server_time_zone=Asia/Shanghai\n    --warehouse_path s3://bucket/lakesoul/flink/data \\\n    --flink.checkpoint s3://bucket/lakesoul/flink/checkpoints \\\n    --flink.savepoint s3://bucket/lakesoul/flink/savepoints\n'})}),"\n",(0,n.jsx)(s.p,{children:"For Oracle, the following additional parameters need to be configured"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Parameter"}),(0,n.jsx)(s.th,{children:"Required"}),(0,n.jsx)(s.th,{children:"Meaning Description"}),(0,n.jsx)(s.th,{children:"Parameter Filling Format"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--source_db.schemaList"}),(0,n.jsx)(s.td,{children:"require"}),(0,n.jsx)(s.td,{children:"The list schema of oracle database"}),(0,n.jsx)(s.td,{children:"--source_db.schemaList schema1,schema2"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--source_db.schema_tables"}),(0,n.jsx)(s.td,{children:"require"}),(0,n.jsx)(s.td,{children:"table name\uff0cUse commas to separate multiple tables"}),(0,n.jsx)(s.td,{children:"--source_db.schema_tables schema.table1,schema.table2"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--server_time_zone=Asia/Shanghai"}),(0,n.jsx)(s.td,{children:"optional"}),(0,n.jsx)(s.td,{children:'Oracle server time zone, Flink side defaults to "Asia/Shanghai"'}),(0,n.jsxs)(s.td,{children:["Refer to ",(0,n.jsx)(s.a,{href:"https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html",children:"JDK ZoneID \u6587\u6863"})]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--source_db.splitSize"}),(0,n.jsx)(s.td,{children:"optional"}),(0,n.jsx)(s.td,{children:"The split size (number of rows) of table snapshot, captured tables are split into multiple splits when read the snapshot of table.the default is 1024."}),(0,n.jsx)(s.td,{children:"--source_db.splitSize 10000"})]})]})]}),"\n",(0,n.jsxs)(s.p,{children:["Synchronous oracle job example\nFor oracle configuration,please refer to ",(0,n.jsx)(s.a,{href:"https://ververica.github.io/flink-cdc-connectors/release-2.4/content/connectors/oracle-cdc.html",children:"https://ververica.github.io/flink-cdc-connectors/release-2.4/content/connectors/oracle-cdc.html"})]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:'./bin/flink run -c org.apache.flink.lakesoul.entry.JdbcCDC \\\n    lakesoul-flink-1.17-2.5.3.jar \\\n    --source_db.db_type oracle \\\n    --source_db.db_name "testDB" \\\n    --source_db.user "FLINKUSER" \\\n    --source.parallelism 1 \\\n    --sink.parallelism 1 \\\n    --source_db.password "flinkpw" \\\n    --source_db.host "172.17.0.2" \\\n    --source_db.port 1521 \\\n    --source_db.splitSize 10000 \\\n    --source_db.schemaList "FLINKUSER" \\\n    --source_db.schema_tables "FLINKUSER.T1" \\\n    --job.checkpoint_interval 1000 \\\n    --server_time_zone=Asia/Shanghai\n    --warehouse_path s3://bucket/lakesoul/flink/data \\\n    --flink.checkpoint s3://bucket/lakesoul/flink/checkpoints \\\n    --flink.savepoint s3://bucket/lakesoul/flink/savepoints\n'})}),"\n",(0,n.jsx)(s.p,{children:"For Postgresql, the following additional parameters need to be configured"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Parameter"}),(0,n.jsx)(s.th,{children:"Required"}),(0,n.jsx)(s.th,{children:"Meaning Description"}),(0,n.jsx)(s.th,{children:"Parameter Filling Format"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--source_db.schemaList"}),(0,n.jsx)(s.td,{children:"require"}),(0,n.jsx)(s.td,{children:"the schema list of postgres"}),(0,n.jsx)(s.td,{children:"--source_db.schemaList schema1,schema2"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--source_db.schema_tables"}),(0,n.jsx)(s.td,{children:"require"}),(0,n.jsx)(s.td,{children:"table name\uff0cUse commas to separate multiple tables"}),(0,n.jsx)(s.td,{children:"--source_db.schema_tables schema.table1,schema.table2"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--source_db.splitSize"}),(0,n.jsx)(s.td,{children:"optional"}),(0,n.jsx)(s.td,{children:"The split size (number of rows) of table snapshot, captured tables are split into multiple splits when read the snapshot of table.the default is 1024."}),(0,n.jsx)(s.td,{children:"--source_db.splitSize 10000"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--pluginName"}),(0,n.jsx)(s.td,{children:"optional"}),(0,n.jsx)(s.td,{children:"The name of the Postgres logical decoding plug-in installed on the server. Supported values are decoderbufs, wal2json, wal2json_rds, wal2json_streaming, wal2json_rds_streaming and pgoutput. default is decoderbufs"}),(0,n.jsx)(s.td,{children:"--pluginName    pgoutput"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"--source_db.slot_name"}),(0,n.jsx)(s.td,{children:"require"}),(0,n.jsx)(s.td,{children:"postgres slot name"}),(0,n.jsx)(s.td,{children:"--source_db.slot_name flink"})]})]})]}),"\n",(0,n.jsxs)(s.p,{children:["For Postgresql configuration,please refer to  ",(0,n.jsx)(s.a,{href:"https://ververica.github.io/flink-cdc-connectors/release-2.4/content/connectors/postgres-cdc.html",children:"https://ververica.github.io/flink-cdc-connectors/release-2.4/content/connectors/postgres-cdc.html"})]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:'./bin/flink run -c org.apache.flink.lakesoul.entry.JdbcCDC \\\n    lakesoul-flink-1.17-2.5.3.jar \\\n    --source_db.db_name "postgres" \\\n    --source_db.user "postgres" \\\n    --source.parallelism 1 \\\n    --source_db.schemaList "public" \\\n    --source_db.db_type "postgres" \\\n    --source_db.password "123456" \\\n    --source_db.host "172.17.0.2" \\\n    --source_db.port 5433 \\\n    --source_db.splitSize 2 \\\n    --source_db.schema_tables "public.t1" \\\n    --source_db.slot_name flink \\\n    --pluginName "pgoutput" \\\n    --sink.parallelism 1 \\\n    --job.checkpoint_interval 1000 \\\n    --warehouse_path s3://bucket/lakesoul/flink/data \\\n    --flink.checkpoint s3://bucket/lakesoul/flink/checkpoints \\\n    --flink.savepoint s3://bucket/lakesoul/flink/savepoints\n'})}),"\n",(0,n.jsx)(s.h2,{id:"lakesoul-flink-cdc-sink-job-execution-process",children:"LakeSoul Flink CDC Sink job execution process"}),"\n",(0,n.jsx)(s.p,{children:"In the initialization phase after the LakeSoul Flink job starts, it will first read all the tables in the configured MySQL DB (excluding tables that do not need to be synchronized). For each table, first determine whether it exists in LakeSoul. If it does not exist, a LakeSoul table is automatically created, and its schema is consistent with the corresponding table in MySQL."}),"\n",(0,n.jsx)(s.p,{children:"After initialization, the CDC Stream of all tables will be read and written to the corresponding LakeSoul tables in Upsert mode."}),"\n",(0,n.jsx)(s.p,{children:"If a DDL Schema change occurs to a MySQL table during synchronization, the change will also be applied to the corresponding LakeSoul table."}),"\n",(0,n.jsx)(s.h2,{id:"lakesoul-flink-cdc-sink-exactly-once-semantic-guarantee",children:"LakeSoul Flink CDC Sink Exactly Once Semantic Guarantee"}),"\n",(0,n.jsx)(s.p,{children:"LakeSoul Flink CDC Sink automatically saves the relevant state during job running, and can restore and rewrite the state when a Flink job fails, so data will not be lost."}),"\n",(0,n.jsx)(s.p,{children:"When LakeSoul writes, write idempotency is guaranteed in two parts:"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:"When the stage file is Commit, it is consistent with the Flink File Sink. The atomicity of the file system rename operation is used to ensure that the staging file is written to the final path. Because rename is atomic, no duplicate writes or misses occur after a Failover."}),"\n",(0,n.jsx)(s.li,{children:"When the LakeSoul metadata is submitted, the file path will be recorded first, and when the snapshot is updated, the file will be marked as submitted through a transaction. After Failover, by judging whether a file has been submitted, the idempotency of submission can be guaranteed."}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"In summary, LakeSoul Flink CDC Sink ensures that data is not lost through state recovery, and ensures that data is not duplicated by committing with idempotency, which achieves an exactly once semantic guarantee."}),"\n",(0,n.jsx)(s.h2,{id:"type-mapping-relationship-between-mysql-and-lakesoul",children:"Type mapping relationship between MySQL and LakeSoul"}),"\n",(0,n.jsx)(s.p,{children:"Since MySQL, Spark, Parquet and other data types are not exactly the same, LakeSoul makes the following mapping relationships during synchronization (types that are not in the table are currently not supported):"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"MySQL Type"}),(0,n.jsx)(s.th,{children:"Spark Type"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"BOOLEAN, BOOL"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.BooleanType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"BIT(1)"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.BooleanType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"BIT(>1)"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.BinaryType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"TINYINT"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.IntegerType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"SMALLINT[(M)]"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.IntegerType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"MEDIUMINT[(M)]"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.IntegerType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"INT, INTEGER[(M)]"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.IntegerType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"BIGINT[(M)]"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.LongType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"REAL[(M,D)]"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.FloatType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"FLOAT[(M,D)]"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.DoubleType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"DOUBLE[(M,D)]"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.DoubleType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"CHAR(M)]"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.StringType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"VARCHAR(M)]"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.StringType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"BINARY(M)]"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.BinaryType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"VARBINARY(M)]"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.BinaryType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"TINYBLOB"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.BinaryType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"TINYTEXT"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.StringType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"BLOB"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.BinaryType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"TEXT"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.StringType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"MEDIUMBLOB"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.BinaryType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"MEDIUMTEXT"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.StringType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"LONGBLOB"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.BinaryType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"LONGTEXT"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.StringType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"JSON"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.StringType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"ENUM"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.StringType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"SET"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.StringType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"YEAR[(2|4)]"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.IntegerType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"TIMESTAMP[(M)]"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.TimestampType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"DATE"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.DateType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"TIME[(M)]"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.LongType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"DATETIME[(M)]"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.TimestampType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"NUMERIC[(M[,D])],DECIMAL[(M[,D])]"}),(0,n.jsxs)(s.td,{children:[(0,n.jsx)(s.em,{children:"if decimal.handling.mode=precise"})," ",(0,n.jsx)("br",{}),"\u2003org.apache.spark.sql.types.DecimalType(M,D) ",(0,n.jsx)("br",{}),"if ",(0,n.jsx)(s.em,{children:"decimal.handling.mode=string"}),(0,n.jsx)("br",{}),"   \u2003                 org.apache.spark.sql.types.DataTypes.StringType",(0,n.jsx)("br",{}),(0,n.jsx)(s.em,{children:"if decimal.handling.mode=doulbe"})," ",(0,n.jsx)("br",{}),"\u2003org.apache.spark.sql.types.DataTypes.DoubleType"]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"GEOMETRY, LINESTRING, POLYGON, MULTIPOINT, MULTILINESTRING, MULTIPOLYGON, GEOMETRYCOLLECTION, POINT"}),(0,n.jsx)(s.td,{children:"Not currently supported"})]})]})]}),"\n",(0,n.jsxs)(s.p,{children:["Types in Spark, type names in Spark SQL, you can find the corresponding relationship in the ",(0,n.jsx)(s.a,{href:"https://spark.apache.org/docs/latest/sql-ref-datatypes.html",children:"Spark Data Types"})," document."]}),"\n",(0,n.jsx)(s.h2,{id:"data-type-matching",children:"Data type matching"}),"\n",(0,n.jsx)(s.p,{children:"Type mapping relationship between Postgres and LakeSoul"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"SMALLINT INT2 SMALLSERIALSERIAL2"}),(0,n.jsx)(s.th,{children:"org.apache.spark.sql.types.DataTypes.IntegerType"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsxs)(s.td,{children:["INTEGER   ",(0,n.jsx)("br",{}),"SERIAL"]}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.IntegerType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsxs)(s.td,{children:["BIGINT   ",(0,n.jsx)("br",{}),"BIGSERIAL"]}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.LongType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsxs)(s.td,{children:["REAL   ",(0,n.jsx)("br",{}),"FLOAT4  ",(0,n.jsx)("br",{}),"FLOAT8   ",(0,n.jsx)("br",{}),"DOUBLE  ",(0,n.jsx)("br",{}),"PRECISION"]}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.DoubleType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsxs)(s.td,{children:["NUMERIC(p, s)  ",(0,n.jsx)("br",{}),"DECIMAL(p, s)"]}),(0,n.jsxs)(s.td,{children:["if decimal.handling.mode=precise  ",(0,n.jsx)("br",{}),"  \u2003 org.apache.spark.sql.types.DecimalType(M,D)  ",(0,n.jsx)("br",{})," if decimal.handling.mode=string   ",(0,n.jsx)("br",{}),"   \u2003org.apache.spark.sql.types.DataTypes.StringType   ",(0,n.jsx)("br",{})," if decimal.handling.mode=doulbe   ",(0,n.jsx)("br",{}),"  \u2003org.apache.spark.sql.types.DataTypes.DoubleType"]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"BOOLEAN"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.BooleanType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"DATE"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.DateType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"TIME [(p)] [WITHOUT TIMEZONE]"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.LongType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"TIMESTAMP [(p)] [WITHOUT TIMEZONE]"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.TimestampType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsxs)(s.td,{children:["CHAR(n)  ",(0,n.jsx)("br",{})," CHARACTER(n)  ",(0,n.jsx)("br",{}),"  VARCHAR(n)  ",(0,n.jsx)("br",{})," CHARACTER VARYING(n)  ",(0,n.jsx)("br",{}),"TEXT"]}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.StringType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"BYTEA"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.BinaryType"})]})]})]}),"\n",(0,n.jsx)(s.p,{children:"Type mapping relationship between Oracle and LakeSoul"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"SMALLINT INT2 SMALLSERIALSERIAL2"}),(0,n.jsx)(s.th,{children:"org.apache.spark.sql.types.DataTypes.IntegerType"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"NUMBER(p, s )"}),(0,n.jsxs)(s.td,{children:["if decimal.handling.mode=precise  ",(0,n.jsx)("br",{})," \u2003org.apache.spark.sql.types.DecimalType(M,D)  ",(0,n.jsx)("br",{}),"if decimal.handling.mode=string  ",(0,n.jsx)("br",{})," \u2003org.apache.spark.sql.types.DataTypes.StringType  ",(0,n.jsx)("br",{}),"if decimal.handling.mode=doulbe  ",(0,n.jsx)("br",{}),"\u2003org.apache.spark.sql.types.DataTypes.DoubleType"]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsxs)(s.td,{children:["FLOAT  ",(0,n.jsx)("br",{})," BINARY_FLOAT"]}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.DoubleType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsxs)(s.td,{children:["DOUBLE PRECISION  ",(0,n.jsx)("br",{})," BINARY_DOUBLE"]}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.DoubleType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"NUMBER(1)"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.BooleanType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"DATE"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.DateType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"TIMESTAMP [(p)] WITH TIME ZONE"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.TimestampType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsxs)(s.td,{children:["CHAR(n)  ",(0,n.jsx)("br",{}),"NCHAR(n)  ",(0,n.jsx)("br",{}),"NVARCHAR2(n)  ",(0,n.jsx)("br",{}),"VARCHAR(n)  ",(0,n.jsx)("br",{}),"VARCHAR2(n)  ",(0,n.jsx)("br",{}),"CLOB  ",(0,n.jsx)("br",{}),"NCLOB  ",(0,n.jsx)("br",{}),"XMLType  ",(0,n.jsx)("br",{}),"SYS.XMLTYPE"]}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.StringType"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"BLOB"}),(0,n.jsx)(s.td,{children:"org.apache.spark.sql.types.DataTypes.BinaryType"})]})]})]}),"\n",(0,n.jsx)(s.h2,{id:"precautions",children:"Precautions"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:"A table in MySQL must have a primary key, and tables without a primary key are currently not supported;"}),"\n",(0,n.jsxs)(s.li,{children:["The DDL change currently supports adding a column at the end, or deleting a column in the middle; the default value of a new column currently only supports ",(0,n.jsx)(s.code,{children:"null"}),", and LakeSoul will automatically add a ",(0,n.jsx)(s.code,{children:"null"})," value to the column when reading old data; the deleted column , LakeSoul will automatically filter this column when reading;"]}),"\n",(0,n.jsx)(s.li,{children:"The TIME type in MySQL corresponds to the LongType type in LakeSoul, as there is no TIME data type in Spark and Debezium resolves the TIME type to the current value in microseconds from 00:00:00. Therefore, this is consistent with Debezium;"}),"\n",(0,n.jsx)(s.li,{children:"The TIMESTAMP and DATETIME types in MySQL are stored as UTC TIME ZOME values in LakeSoul to avoid time zone resolution issues; When reading, you just need to specify the time zone and it can be parsed according to the specified time zone. So it is necessary to correctly fill in the server_time_zone parameter when starting the FLINK CDC task."}),"\n",(0,n.jsx)(s.li,{children:"Postgres needs to set wal_level = logical"}),"\n",(0,n.jsx)(s.li,{children:"In order to obtain complete Update event information in Postgres, you need to execute: alter table tablename replica identity full."}),"\n",(0,n.jsx)(s.li,{children:"Oracle needs to enable incremental logging for synchronized tables: ALTER TABLE inventory.customers ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;"}),"\n",(0,n.jsx)(s.li,{children:"When transferring tables from Oracle to lakesoul, avoid using schema.* to transfer multiple tables."}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,a.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},1151:(e,s,t)=>{t.d(s,{Z:()=>l,a:()=>i});var n=t(7294);const a={},r=n.createContext(a);function i(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);